// Prisma Schema for Alumni QR Code Tracking App

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

model OldAccount {
  id Int @id @default(autoincrement())

  studentId  String   @unique
  firstName  String
  lastName   String
  middleName String?
  birthDate  DateTime
  program    String
  batch      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?
}

// User model: Handles both alumni and admin/super admin login.
model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  role     Role
  avatar   String?
  bio      String? @default("")

  isOldAccount Boolean?    @default(false)
  oldAccount   OldAccount? @relation(fields: [oldAccountId], references: [id])
  oldAccountId Int?        @unique

  // Personal Info
  firstName     String   @default("")
  lastName      String   @default("")
  middleName    String?  @default("")
  // phoneNumber String? @default("")
  nationality   String?  @default("")
  religion      String?  @default("")
  address       Json?    @default("{}")
  gender        Gender   @default(PREFER_NOT_TO_SAY)
  contactNumber String?  @default("")
  birthDate     DateTime

  // Academic Info
  studentId String? @unique
  batch     Int?    @default(0)
  course    String?

  // POST GRAD INFO
  company             String? @default("")
  currentOccupation   String? @default("")
  jobTitle            String? @default("")
  industry            String? @default("")
  postStudyUniversity String? @default("")
  years               Int? // Years take to get the job related to the program

  // User Settings
  shareLocation Boolean @default(false)

  sessions Session[]

  verifiedAt DateTime?
  status     UserStatus @default(ACTIVE)
  rate       Decimal?   @db.Decimal(2, 1) // Alumni rating, can be used for feedback or reputation

  occupationStatus OccupationStatus @default(PREFER_NOT_TO_SAY)

  notifications        Notification[] // Alumni can have multiple notifications
  eventsInterested     Event[]               @relation("InterestEvent") // Alumni can be interested in multiple events
  eventsAttended       Event[]               @relation("EventAttendees") // Alumni can attend multiple events
  eventComments        EventComment[] // Alumni can comment on multiple events
  likedAnnouncements   Announcement[]        @relation("AnnouncementLikes") // Alumni can like multiple announcements
  announcementComments AnnouncementComment[] // Alumni can comment on multiple announcements
  posts                Post[]                @relation("Posted By") // Alumni can post multiple posts
  postComments         PostComment[] // Alumni can comment on multiple posts
  likedPosts           Post[]                @relation("PostLikes") // Alumni can like multiple posts
  job                  Job[]
  recruitment          Recruitment[]         @relation("RecruitmentApplicants") // Alumni can apply for multiple recruitments
  Votes                Vote[] // Alumni can vote on multiple polls
  settings             Setting[] // Alumni can have multiple settings

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Announcement Announcement[]

  @@map("users")
}

enum OccupationStatus {
  POST_GRADUATE_STUDENT
  EMPLOYED
  UNEMPLOYED
  SELF_EMPLOYED
  RETIRED
  PREFER_NOT_TO_SAY
}

enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
  DELETED
}

enum Role {
  ALUMNI
  ADMIN
  SUPER_ADMIN
}

// Event model: Represents the alumni events (like homecoming).
model Event {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  name      String
  content   String
  coverImg  String
  startDate DateTime
  endDate   DateTime

  startTime DateTime // Time when the alumni checked in
  endTime   DateTime // Time when the alumni checked out

  location String

  interested User[] @relation("InterestEvent") // Many-to-many with alumni
  alumni     User[] @relation("EventAttendees") // Many-to-many with alumni

  comments EventComment[]

  // Notifications related to the event
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

enum NotificationType {
  EVENT
  EVENT_COMMENT
  ANNOUNCEMENT
  LIKE_ANNOUNCEMENT
  ANNOUNCEMENT_COMMENT
  POST
  LIKE_POST
  POST_COMMENT
  NEW_JOB
  JOB
  NEW_RECRUITMENT
  RECRUITMENT
  NEW_POLL
  POLL
  RECRUITMENT_APPLICATION
}

// Notification model: Stores notifications for alumni.
model Notification {
  id Int @id @default(autoincrement())

  message    String
  readStatus Boolean          @default(false) // Whether the notification has been read
  type       NotificationType
  link       String?

  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("notifications")
}

model Session {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Token {
  email      String   @id @unique
  token      String
  validUntil DateTime

  @@map("tokens")
}

model EventComment {
  id      Int    @id @default(autoincrement())
  comment String

  eventId     Int
  event       Event @relation(fields: [eventId], references: [id])
  commentBy   User  @relation(fields: [commentById], references: [id])
  commentById Int

  createdAt DateTime @default(now())

  @@map("event_comments")
}

model AnnouncementComment {
  id Int @id @default(autoincrement())

  comment        String
  announcementId Int
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  commentBy      User         @relation(fields: [commentById], references: [id])
  commentById    Int

  createdAt DateTime @default(now())

  @@map("announcement_comments")
}

model Announcement {
  id      Int     @id @default(autoincrement())
  slug    String  @unique
  title   String  @db.Text
  content String  @db.Text
  image   String? @default("")

  createdById Int
  createdBy   User @relation(fields: [createdById], references: [id])

  likedBy  User[]                @relation("AnnouncementLikes") // Many-to-many with alumni
  comments AnnouncementComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("announcements")
}

enum PostType {
  ANNOUNCEMENT
  EVENT
  POST
  JOB
  NEWS
}

model Post {
  id      Int      @id @default(autoincrement())
  slug    String   @unique
  // type  PostType @default(JOB)
  title   String   @db.Text
  content String   @db.Text
  images  String[]

  comments PostComment[]
  likedBy  User[]        @relation("PostLikes") // Many-to-many with alumni

  postedById Int
  postedBy   User @relation("Posted By", fields: [postedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model PostComment {
  id      Int    @id @default(autoincrement())
  comment String

  postId   Int
  postedBy Post @relation(fields: [postId], references: [id])

  commentBy   User @relation(fields: [commentById], references: [id])
  commentById Int

  createdAt DateTime @default(now())

  @@map("post_comments")
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  FREELANCE
}

enum JobStatus {
  OPEN
  COMPLETED
  CLOSED
}

model Job {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  company     String
  location    String
  jobTitle    String
  type        JobType   @default(FULL_TIME)
  status      JobStatus @default(OPEN)

  postedById Int
  postedBy   User @relation(fields: [postedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jobs")
}

enum RecruitmentStatus {
  OPEN
  CLOSED
}

model Recruitment {
  id Int @id @default(autoincrement())

  eventTitle     String
  recruiting     String
  allowedBatches Int[]
  industry       String
  topics         String
  date           DateTime

  applicantsId Int[]
  applicants   User[] @relation("RecruitmentApplicants")

  status RecruitmentStatus @default(OPEN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recruitments")
}

enum PollStatus {
  OPEN
  COMPLETED
}

model Poll {
  id        Int        @id @default(autoincrement())
  question  String     @db.Text // Poll's main question
  status    PollStatus @default(OPEN)
  options   Option[] // Relationship: One poll has many options
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Option {
  id      Int    @id @default(autoincrement())
  content String // Option text (e.g., "Manila")
  pollId  Int // Foreign key referencing Poll
  poll    Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes   Vote[] // Relationship: Option can have multiple votes
}

model Vote {
  id        Int      @id @default(autoincrement())
  optionId  Int // Foreign key referencing Option
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  userId    Int // Foreign key referencing User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Batch {
  id    Int @id @default(autoincrement())
  batch Int @unique

  images String[]

  @@map("batches")
}

// model Recruitment {
//   id Int @id @default(autoincrement())

//   title String
//   allowedBatches Int[]
//   industry String
//   topics String
//   date DateTime

//   @@map("recruitments")
// }

model LoginLog {
  id        Int     @id @default(autoincrement())
  email     String
  ipAddress String
  userAgent String
  status    Boolean @default(false) // true for success, false for failure
  device    String? // Device used for login (e.g., "Mobile", "Desktop")
  os        String? // Operating system used for login (e.g., "Windows", "macOS", "Android", "iOS")
  browser   String? // Browser used for login (e.g., "Chrome", "Firefox", "Safari")

  createdAt DateTime @default(now())

  @@map("login_logs")
}

model Setting {
  id            Int     @id @default(autoincrement())
  websiteName   String  @default("BU Connect")
  description   String? @default("")
  isMaintenance Boolean @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@map("settings")
}
